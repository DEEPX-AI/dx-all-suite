ARG UBUNTU_VERSION=24.04
ARG TAG_NAME=${UBUNTU_VERSION}
ARG BASE_IMAGE_NAME=ubuntu
FROM alpine:latest AS install
USER root

# COPY and EXTRACT 'dx-com' for using option '--strip-components=1'
WORKDIR /deepx/dx-compiler/dx_com
ARG FILE_DXCOM
COPY ${FILE_DXCOM} /deepx/dx-compiler/dx_com

RUN tar_file=$(ls *.tar.gz) && \
    first_entry=$(tar -tzf "$tar_file" | head -n 1) && \
    normalized_entry="${first_entry#./}" && \
    if echo "$normalized_entry" | grep -q '/'; then \
        if echo "$first_entry" | grep -q '^./'; then \
            echo "Detected top-level directory with ./ prefix. Using --strip-components=2"; \
            tar -xzf "$tar_file" --strip-components=2 -C .; \
        else \
            echo "Detected top-level directory. Using --strip-components=1"; \
            tar -xzf "$tar_file" --strip-components=1 -C .; \
        fi; \
    else \
        echo "No top-level directory. Extracting as-is"; \
        tar -xzf "$tar_file" -C .; \
    fi && \
    rm -f "$tar_file"

WORKDIR /deepx/dx-compiler/dx_tron
ARG FILE_DXTRON
COPY ${FILE_DXTRON} /deepx/dx-compiler/dx_tron

# COPY 'scripts' and 'getting-start'
COPY scripts /deepx/scripts
COPY getting-start /deepx/getting-start
ENV DX_CONTAINER_MODE=true
RUN /deepx/getting-start/compiler-clean.sh

###
FROM ${BASE_IMAGE_NAME}:${TAG_NAME}

USER root

ARG TZ=Asia/Seoul
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ >/etc/timezone

ARG DEBIAN_FRONTEND=noninteractive
ENV PATH="/usr/local/bin:${PATH}"

### update apt repo
RUN apt-get update && apt-get install -y \
    software-properties-common && \
    add-apt-repository universe && \
    add-apt-repository multiverse && \
    apt-get update

### install utils
RUN apt-get update && apt-get install -y \
        tzdata \
        git vim sudo \
        lsb-release

# X11 forwarding and xcb
RUN apt-get install -y x11-apps libx11-6 xauth libxext6 libxrender1 libxtst6 libxi6 libxcb-xinerama0

# for setting ssl issue on intranet
# only used 'USE_INTRANET=true'
ARG USE_INTRANET=false
ARG CA_FILE_NAME="dummy.crt"
COPY ${CA_FILE_NAME} /usr/local/share/ca-certificates/
RUN if [ "$USE_INTRANET" = "true" ]; then \
      git config --global http.sslVerify false && \
      update-ca-certificates ; \
    else \
      echo "Skipping intranet SSL setup"; \
    fi

# Install dependencies for dx-compiler
# python 3.11
RUN set -x && \
    echo "Install python 3.11..." && \
    UBUNTU_VERSION=$(lsb_release -rs) && \
    echo "*** UBUNTU_VERSION(${UBUNTU_VERSION}) ***" && \
    if [ "$UBUNTU_VERSION" = "24.04" ] || [ "$UBUNTU_VERSION" = "22.04" ] || [ "$UBUNTU_VERSION" = "20.04" ]; then \
        add-apt-repository -y ppa:deadsnakes/ppa && apt-get update && \
        apt-get install -y python3.11 python3.11-dev python3.11-venv; \
    else \
        echo "Unsupported Ubuntu version: $UBUNTU_VERSION" && exit 1; \
    fi && \
    echo "Install python3.11 done";

# Set up Virtual Environment
RUN set -x && \
    python3.11 -m venv /venv-dxnn

RUN set -x && \
    echo "Install dependencies..." && \
    UBUNTU_VERSION=$(lsb_release -rs) && \
    echo "*** UBUNTU_VERSION(${UBUNTU_VERSION}) ***" && \
    if [ "$UBUNTU_VERSION" = "24.04" ]; then \
        apt-get update && apt-get install -y --no-install-recommends \
            libgl1-mesa-dev libglib2.0-0 make \
            libfuse2 libayatana-appindicator3-1; \
    elif [ "$UBUNTU_VERSION" = "22.04" ]; then \
        apt-get update && apt-get install -y --no-install-recommends \
            libgl1-mesa-dev libglib2.0-0 make \
            libfuse2 libappindicator3-1 libgconf-2-4; \
    elif [ "$UBUNTU_VERSION" = "20.04" ]; then \
        apt-get update && apt-get install -y --no-install-recommends \
            libgl1-mesa-dev libgl1-mesa-glx libglib2.0-0 make \
            libfuse2 libappindicator1 libgconf-2-4; \
    else \
        echo "Unsupported Ubuntu version: $UBUNTU_VERSION" && exit 1; \
    fi && \
    apt-get update && apt-get install -y --no-install-recommends \
        libssl-dev \
        wget \
        openssl \
        build-essential \
        zlib1g-dev \
        patchelf \
        libffi-dev \
        ca-certificates \
        libbz2-dev \
        liblzma-dev \
        libncursesw5-dev \
        libsqlite3-dev \
        tk-dev \
        libgdbm-dev \
        libc6-dev \
        libncurses5-dev \
        libnss3-dev \
        ccache \
        fuse libxss1 libxtst6 libnss3 \
        libcanberra-gtk-module libcanberra-gtk3-module \
        software-properties-common \
        vim fim

RUN add-apt-repository -y universe && \
    apt-get update && \
    apt-get install -y \
        xdg-utils && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ARG HOST_UID
ARG HOST_GID
ARG TARGET_USER
ARG TARGET_HOME

# Set default values (in case values are not provided at build time)
ENV HOST_UID=${HOST_UID:-1000}
ENV HOST_GID=${HOST_GID:-1000}
ENV TARGET_USER=${TARGET_USER:-deepx}
ENV TARGET_HOME=${TARGET_HOME:-/deepx}

# UID/GID based user processing
RUN set -eux; \
    if getent passwd "$HOST_UID" > /dev/null; then \
        EXISTING_USER=$(getent passwd "$HOST_UID" | cut -d: -f1); \
        usermod -l "$TARGET_USER" -d "$TARGET_HOME" -m "$EXISTING_USER"; \
        EXISTING_GROUP=$(getent group "$HOST_GID" | cut -d: -f1); \
        groupmod -n "$TARGET_USER" "$EXISTING_GROUP"; \
    else \
        groupadd -g "$HOST_GID" "$TARGET_USER" || true; \
        useradd -u "$HOST_UID" -g "$HOST_GID" -d "$TARGET_HOME" -s /bin/bash "$TARGET_USER"; \
    fi

# Copy dx_com and dx_tron
COPY --from=install /deepx /deepx

RUN chown -R "$HOST_UID:$HOST_GID" "$TARGET_HOME"

# set default password
RUN echo "deepx:deepx" | chpasswd

USER $TARGET_USER
WORKDIR $TARGET_HOME

RUN echo "source /venv-dxnn/bin/activate" >> $TARGET_HOME/.bashrc

ENTRYPOINT ["tail", "-f", "/dev/null"]
