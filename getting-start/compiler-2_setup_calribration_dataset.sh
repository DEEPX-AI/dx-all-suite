#!/bin/bash
SCRIPT_DIR=$(realpath "$(dirname "$0")")
COMPILER_PATH=$(realpath -s "${SCRIPT_DIR}/../dx-compiler")
DX_AS_PATH=$(realpath -s "${COMPILER_PATH}/..")

# color env settings
source ${DX_AS_PATH}/scripts/color_env.sh

echo -e "======== PATH INFO ========="
echo "COMPILER_PATH($COMPILER_PATH)"
echo "DX_AS_PATH($DX_AS_PATH)"
echo -e "============================"


# setup 'calibration_dataset' to './calibration_dataset'
#   Notes: 
#     - The calibration dataset images must exist at the path specified in the `default_loader.dataset_path` attribute in `onnx/{MODEL_NAME}.json`.
#     - In this Getting-Start guide, a symbolic link is created to use the calibration_dataset distributed with `dx_com`.
#     - When compiling a model that was trained and generated by the user, calibration images should be relevant to the training data or field data. If the calibration dataset is unrelated, it may cause a significant drop in accuracy.
#
# onnx/{MODEL_NAME}.json
# ```
# {
#   ...,
#   "default_loader": {
#     ...,
#     "dataset_path": "./calibration_dataset",
#     ...,
#   }
#   ...,
# }
# ```

make_symlink_calribration_dataset() {
    if [ ! -d "${COMPILER_PATH}/dx_com/calibration_dataset" ]; then
        echo -e "${TAG_ERROR} '${COMPILER_PATH}/dx_com/calibration_dataset' is not exist"
        exit 1
    fi

    if [ -L "${CALIBRATION_DATASET_PATH}" ] && [ -e "${CALIBRATION_DATASET_PATH}" ]; then
        echo -e "${TAG_INFO} '${CALIBRATION_DATASET_PATH}' is exist. so, skip to make symlink"
        return 0
    fi
    
    if [ -L "${CALIBRATION_DATASET_PATH}" ] && [ ! -e "${CALIBRATION_DATASET_PATH}" ]; then
        echo "'${CALIBRATION_DATASET_PATH}' is symlink. but, it is broken. so, recreate symlink."
        rm -rf ${CALIBRATION_DATASET_PATH}
    fi

    CMD="ln -s ${COMPILER_PATH}/dx_com/calibration_dataset ${SCRIPT_DIR}/."
    echo "$CMD"

    $CMD
    if [ $? -ne 0 ]; then
        echo -e "${TAG_ERROR} Setup 'calibration_dataset' to './calibration_dataset failed!"
        exit 1
    fi

    echo -e "${TAG_SUCC} Setup 'calibration_dataset' to './calibration_dataset"
}

hijack_dataset_path() {
    echo -e "=== hijack dataset_path (${model_name}.json) ${TAG_START} ==="

    local model_name=$1

    TARGET_FILE=${MODELZOO_PATH}/json/${model_name}.json
    ORIGIN_FILE=${MODELZOO_PATH}/json/${model_name}.json.bak

    if [ -f "${ORIGIN_FILE}" ]; then
        echo -e "${TAG_WARN} ${TARGET_FILE} seems to be already modified. Skipping hijack step."
        return 0
    fi

    cp ${TARGET_FILE} ${ORIGIN_FILE}

    HIJACK_CMD="sed -i \
    -e 's|\"dataset_path\"[[:space:]]*:[[:space:]]*\".*\"|\"dataset_path\": \"./calibration_dataset\"|g' \
    ${TARGET_FILE}"
    
    echo "$HIJACK_CMD"
    eval "$HIJACK_CMD"
    if [ $? -ne 0 ]; then
        echo -e "${TAG_ERROR} Hijack dataset_path failed!"
        exit 1
    fi

    echo -e "=== show hijacking diff [BEGIN] ==="
    diff  ${ORIGIN_FILE} ${TARGET_FILE}
    echo -e "=== show hijacking diff [END] ==="
    echo -e "=== hijack dataset_path (${model_name}.json) ${TAG_DONE} ==="
}

main() {
    MODELZOO_PATH="${SCRIPT_DIR}/modelzoo"
    CALIBRATION_DATASET_PATH="${SCRIPT_DIR}/calibration_dataset"

    make_symlink_calribration_dataset

    MODEL_NAME_LIST=("YOLOV5S-1" "YOLOV5S_Face-1" "MobileNetV2-1")
    for i in "${!MODEL_NAME_LIST[@]}"; do
        hijack_dataset_path ${MODEL_NAME_LIST[$i]}
    done
}

main

exit 0

