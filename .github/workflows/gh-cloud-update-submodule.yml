# dx-all-suite/.github/workflows/gh-cloud-update-submodule.yml
name: Update Submodule

on:
  repository_dispatch:
    types:
      - update-submodule # dx-runtime staging push로부터의 원래 트리거
      - update-submodule-from-child # dx-runtime/compiler/modelzoo main branch 업데이트로부터의 새로운 트리거

permissions: write-all

jobs:
  update-submodule:
    runs-on:
      - self-hosted
      - sdk
    timeout-minutes: 5
    steps:
      - name: Clean Workspace
        run: |
          sudo rm -rf ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # 'update-submodule-from-child'에 의해 트리거된 경우, ref는 parent_ref (main)여야 합니다.
          # 'update-submodule' (dx-runtime의 staging push)에 의해 트리거된 경우, ref는 staging입니다.
          ref: ${{ github.event.client_payload.parent_ref || github.event.client_payload.ref }}
          submodules: recursive
          fetch-tags: true
          fetch-depth: 0
          token: ${{ secrets.GC_DCI_TOKEN }}

      - name: Update Submodule
        run: |
          SUBMODULE_NAME="${{ github.event.client_payload.submodule_name || github.event.client_payload.name }}"
          SUBMODULE_SHA="${{ github.event.client_payload.submodule_sha || github.event.client_payload.sha }}"
          TARGET_BRANCH="${{ github.event.client_payload.parent_ref || github.event.client_payload.ref }}"

          echo "Updating submodule $SUBMODULE_NAME to $SUBMODULE_SHA on $TARGET_BRANCH branch."

          git checkout $TARGET_BRANCH

          git config -f .gitmodules submodule.$SUBMODULE_NAME.url git@github.com:DEEPX-AI/$SUBMODULE_NAME.git
          git submodule update --init --recursive $SUBMODULE_NAME

          cd $SUBMODULE_NAME
          git fetch origin
          git checkout $SUBMODULE_SHA
          cd ..

      - name: Generate DATE ENV
        run: |
          echo "DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Commit Submodule Changes
        id: auto_commit # Add an ID to get outputs
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: ${{ github.event.client_payload.parent_ref || github.event.client_payload.ref }}
          commit_message: "ci(${{env.DATE}}): Update ${{ github.event.client_payload.submodule_name || github.event.client_payload.name }}"
          commit_options: "--no-verify --allow-empty"

      - name: Create Staging Tag for dx-all-suite
        # 이 스텝은 dx-all-suite의 staging 브랜치에 대한 업데이트가 발생하고
        # client_payload에 tag_version이 제공되었을 때만 실행됩니다.
        if: (github.event.client_payload.parent_ref == 'staging' || github.event.client_payload.ref == 'staging') && github.event.client_payload.tag_version != ''
        run: |
          FULL_COMMIT_MESSAGE="ci(${{env.DATE}}): Update ${{ github.event.client_payload.submodule_name || github.event.client_payload.name }}"
          TAG_NAME="${{ github.event.client_payload.tag_version }}" # 전달받은 tag_version 사용
          COMMIT_SHA="${{ steps.auto_commit.outputs.commit_sha }}"

          echo "Creating tag: $TAG_NAME at commit $COMMIT_SHA"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f -a "$TAG_NAME" "$COMMIT_SHA" -m "$FULL_COMMIT_MESSAGE"
          git push origin "$TAG_NAME" --force || true # 태그가 이미 존재하면 강제 푸시, 오류 무시

          # 선택적으로 이 staging 태그에 대한 드래프트 릴리즈 생성
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GC_DCI_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/DEEPX-AI/dx-all-suite/releases" \
            -d '{
              "tag_name": "'"$TAG_NAME"'",
              "name": "'"$TAG_NAME"'",
              "body": "'"$FULL_COMMIT_MESSAGE"'",
              "draft": true,
              "prerelease": true,
              "make_latest": "false"
            }' || true # 릴리즈가 이미 존재하면 오류 무시
